import asyncio
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
import requests

class SetProfileState(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()
    calorie_goal = State()


class LogFoodState(StatesGroup):
    food = State()


def get_food_info(product_name):
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
        return None
    print(f"–û—à–∏–±–∫–∞: {response.status_code}")
    return None



bd = {}
token = ""

bot = Bot(token=token)
dp = Dispatcher()


@dp.message(Command('set_profile'))
async def cmd_set_profile(message: types.Message, state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(SetProfileState.weight)


@dp.message(SetProfileState.weight)
async def weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(SetProfileState.height)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å :")


@dp.message(SetProfileState.height)
async def height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        await state.update_data(height=height)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç :")
        await state.set_state(SetProfileState.age)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç :")


@dp.message(SetProfileState.age)
async def age(message: types.Message, state: FSMContext):
    try:
        age = float(message.text)
        await state.update_data(age=age)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ,—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å? :")
        await state.set_state(SetProfileState.activity)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç :")


@dp.message(SetProfileState.activity)
async def activity(message: types.Message, state: FSMContext):
    try:
        activity = float(message.text)
        await state.update_data(activity=activity)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? :")
        await state.set_state(SetProfileState.city)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å? :")


@dp.message(SetProfileState.city)
async def city(message: Message, state: FSMContext):
    try:
        city = message.text
        await state.update_data(city=city)
        data = await state.get_data()
        bd[message.from_user.id] = data
        bd[message.from_user.id]['calorie_goal'] = bd[message.from_user.id]['weight'] * 10 + 6.25 * \
                                                   bd[message.from_user.id]['height'] - 4 * bd[message.from_user.id][
                                                       'age'] + bd[message.from_user.id]['activity'] * 8
        bd[message.from_user.id]['water_goal'] = bd[message.from_user.id]['weight'] * 20 + 350 * \
                                                 bd[message.from_user.id]['activity'] / 40 + 550
        bd[message.from_user.id]['logged_water'] = 0
        bd[message.from_user.id]['logged_calories'] = 0
        bd[message.from_user.id]['burned_calories'] = 0

        await state.set_state(SetProfileState.calorie_goal)
        await message.reply(
            f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∫–∞–ª–æ—Ä–∏—è–º, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {bd[message.from_user.id]['calorie_goal']}")
    except Exception as e:
        print(e)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? :")


@dp.message(SetProfileState.calorie_goal)
async def goal(message: types.Message, state: FSMContext):
    try:
        calorie_goal = float(message.text)
        bd[message.from_user.id]['calorie_goal'] = calorie_goal
        await state.update_data(calorie_goal=calorie_goal)
        await state.clear()
        await message.reply("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã :")
    except ValueError:
        await message.reply(
            f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∫–∞–ª–æ—Ä–∏—è–º, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {bd[message.from_user.id]['calorie_goal']}")



@dp.message(Command("log_food"))
async def food_start(message: Message, state: FSMContext):
    try:
        product_name = message.text.split()[-1]
        await state.set_state(LogFoodState.food)
        await state.update_data(food_calories=get_food_info(product_name)['calories'])
        await message.reply("–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –±—ã–ª–æ –≤–∞–º–∏ —Å—ä–µ–¥–µ–Ω–æ?")
    except Exception as e :
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@dp.message(LogFoodState.food)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        grams = float(message.text)
        data = await state.get_data()
        data = float(data['food_calories'])
        bd[message.from_user.id]['logged_calories'] += data * grams / 100
        await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ, –≤—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏: {data * grams / 100}–∫–∫–∞–ª.")
        await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ –µ—â—ë —Ä–∞–∑:")


@dp.message(Command('log_water'))
async def log_water(message: types.Message):
    try:

        bd[message.from_user.id]['logged_water'] += float(message.text.split()[-1])
        water_norm = bd[message.from_user.id]['water_goal'] - bd[message.from_user.id]['logged_water']

        if water_norm > 0:
            await message.reply(
                f"–í—ã–ø–∏—Ç–∞—è –≤–æ–¥–∞ - –∑–∞–ø–∏—Å–∞–Ω–∞. –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã: {water_norm}.")
        else:
            await message.reply(f"–í—ã–ø–∏—Ç–∞—è –≤–æ–¥–∞ - –∑–∞–ø–∏—Å–∞–Ω–∞.–í—ã –≤—ã–ø–æ–ª–Ω–µ–ª–∏ –Ω–æ—Ä–º—É –≤–æ–¥—ã, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!")

    except ValueError as e:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–∞–º–∏ –≤–æ–¥—ã –µ—â—ë —Ä–∞–∑ :")


@dp.message(Command('log_workout'))
async def log_workout(message: types.Message):
    try:
        train = message.text.split()[-2]
        train_time = float(message.text.split()[-1])
        bd[message.from_user.id]['water_goal'] += int(train_time / 30 * 300)
        bd[message.from_user.id]['burned_calories'] += train_time * 12

        await message.reply(
            f"–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–∫–∞ {train}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {train_time} –º–∏–Ω—É—Ç'—ã. –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {train_time * 12} –∫–∫–∞–ª. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {train_time / 30 * 300} –º–ª –≤–æ–¥—ã.")

    except ValueError as e:
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@dp.message(Command('check_progress'))
async def check_progress(message: types.Message):
    try:
        bot_answer = f"""üìä –í–∞—à –ü—Ä–æ–≥—Ä–µ—Å—Å:
        –í–æ–¥–∞:
        - –í—ã–ø–∏—Ç–æ: {bd[message.from_user.id]['logged_water']}  –º–ª –∏–∑ {bd[message.from_user.id]['water_goal']} –º–ª.
        - –û—Å—Ç–∞–ª–æ—Å—å: {bd[message.from_user.id]['water_goal'] - bd[message.from_user.id]['logged_water']} –º–ª.

        –ö–∞–ª–æ—Ä–∏–∏:
        - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ:
{bd[message.from_user.id]['logged_calories']} –∫–∫–∞–ª –∏–∑ {bd[message.from_user.id]['calorie_goal']} –∫–∫–∞–ª.
        - –°–æ–∂–∂–µ–Ω–æ: {bd[message.from_user.id]['burned_calories']} –∫–∫–∞–ª.
        - –ë–∞–ª–∞–Ω—Å: {bd[message.from_user.id]['calorie_goal'] - bd[message.from_user.id]['logged_calories'] + bd[message.from_user.id]['burned_calories']} –∫–∫–∞–ª."""

        await message.reply(bot_answer)
    except Exception as e:
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")





async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())